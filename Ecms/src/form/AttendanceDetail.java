package form;

import javax.swing.JOptionPane;
import config.Constanta;
import java.awt.HeadlessException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import model.Attendance;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author bason
 */
public class AttendanceDetail extends javax.swing.JFrame {

    /**
     * Creates new form Login
     */
    public AttendanceDetail() {
        initComponents();
        formAttendanceHeaderLabelId.setVisible(false);
        formAttendanceHeaderLabelNik.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formAttendancePanelHeader = new javax.swing.JPanel();
        formAttendanceHeaderLable = new javax.swing.JLabel();
        formAttendanceHeaderLabelId = new javax.swing.JLabel();
        formAttendanceHeaderLabelNik = new javax.swing.JLabel();
        formAttendancePanelFooter = new javax.swing.JPanel();
        formAttendanceLabelFooter2 = new javax.swing.JLabel();
        formAttendancePanelMain = new javax.swing.JPanel();
        formAttendanceMainLabelFullName = new javax.swing.JLabel();
        formAttendanceMainButtonLogout = new javax.swing.JButton();
        formAttendanceMainButtonBack = new javax.swing.JButton();
        formAttendanceMainAttendancePanelTable = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        formAttendanceMainAttendanceTable = new javax.swing.JTable();
        formDashboardMainAttendanceGenerate = new javax.swing.JButton();
        formAttendanceMainAttendancePanel = new javax.swing.JPanel();
        formAttendanceMainAttendanceLebelFullName = new javax.swing.JLabel();
        formAttendanceMainAttendanceLebelFrom = new javax.swing.JLabel();
        formAttendanceMainAttendanceLebelTo = new javax.swing.JLabel();
        formAttendanceMainAttendanceTextFieldFullName = new javax.swing.JTextField();
        formAttendanceMainAttendanceJDateChooseFrom = new com.toedter.calendar.JDateChooser();
        formAttendanceMainAttendanceJDateChooseTo = new com.toedter.calendar.JDateChooser();
        formAttendanceMainAttendanceButtonSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("frameEmployee"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(1024, 768));

        formAttendancePanelHeader.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        formAttendancePanelHeader.setPreferredSize(new java.awt.Dimension(1024, 100));

        formAttendanceHeaderLable.setFont(new java.awt.Font("Roboto Medium", 0, 36)); // NOI18N
        formAttendanceHeaderLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formAttendanceHeaderLable.setText("Attendance Detail");

        formAttendanceHeaderLabelId.setFont(new java.awt.Font("Roboto Light", 0, 8)); // NOI18N
        formAttendanceHeaderLabelId.setText("Id");
        formAttendanceHeaderLabelId.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        formAttendanceHeaderLabelNik.setFont(new java.awt.Font("Roboto Light", 0, 8)); // NOI18N
        formAttendanceHeaderLabelNik.setText("Nik");
        formAttendanceHeaderLabelNik.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout formAttendancePanelHeaderLayout = new javax.swing.GroupLayout(formAttendancePanelHeader);
        formAttendancePanelHeader.setLayout(formAttendancePanelHeaderLayout);
        formAttendancePanelHeaderLayout.setHorizontalGroup(
            formAttendancePanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formAttendancePanelHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formAttendancePanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(formAttendanceHeaderLable, javax.swing.GroupLayout.DEFAULT_SIZE, 1004, Short.MAX_VALUE)
                    .addGroup(formAttendancePanelHeaderLayout.createSequentialGroup()
                        .addComponent(formAttendanceHeaderLabelId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(formAttendanceHeaderLabelNik)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        formAttendancePanelHeaderLayout.setVerticalGroup(
            formAttendancePanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formAttendancePanelHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(formAttendanceHeaderLable, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(formAttendancePanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formAttendanceHeaderLabelId)
                    .addComponent(formAttendanceHeaderLabelNik)))
        );

        formAttendanceHeaderLable.getAccessibleContext().setAccessibleDescription("");

        formAttendancePanelFooter.setPreferredSize(new java.awt.Dimension(1024, 75));

        formAttendanceLabelFooter2.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        formAttendanceLabelFooter2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formAttendanceLabelFooter2.setText("Employee Content Management System CopyRight Â©2021");

        javax.swing.GroupLayout formAttendancePanelFooterLayout = new javax.swing.GroupLayout(formAttendancePanelFooter);
        formAttendancePanelFooter.setLayout(formAttendancePanelFooterLayout);
        formAttendancePanelFooterLayout.setHorizontalGroup(
            formAttendancePanelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formAttendancePanelFooterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(formAttendanceLabelFooter2, javax.swing.GroupLayout.DEFAULT_SIZE, 1004, Short.MAX_VALUE)
                .addContainerGap())
        );
        formAttendancePanelFooterLayout.setVerticalGroup(
            formAttendancePanelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formAttendancePanelFooterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(formAttendanceLabelFooter2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        formAttendanceMainLabelFullName.setFont(new java.awt.Font("Roboto Light", 1, 18)); // NOI18N
        formAttendanceMainLabelFullName.setText("FullName");

        formAttendanceMainButtonLogout.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formAttendanceMainButtonLogout.setText("Logout");
        formAttendanceMainButtonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formAttendanceMainButtonLogoutActionPerformed(evt);
            }
        });
        formAttendanceMainButtonLogout.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formAttendanceMainButtonLogoutKeyPressed(evt);
            }
        });

        formAttendanceMainButtonBack.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formAttendanceMainButtonBack.setText("Back");
        formAttendanceMainButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formAttendanceMainButtonBackActionPerformed(evt);
            }
        });
        formAttendanceMainButtonBack.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formAttendanceMainButtonBackKeyPressed(evt);
            }
        });

        formAttendanceMainAttendancePanelTable.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Attendance", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Roboto", 0, 11))); // NOI18N

        formAttendanceMainAttendanceTable.setFont(new java.awt.Font("Roboto Light", 0, 14)); // NOI18N
        formAttendanceMainAttendanceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nik", "Full Name", "Check In", "Check Out", "Location", "Duration", "Status", "Information"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        formAttendanceMainAttendanceTable.setColumnSelectionAllowed(true);
        formAttendanceMainAttendanceTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        formAttendanceMainAttendanceTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formAttendanceMainAttendanceTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(formAttendanceMainAttendanceTable);
        formAttendanceMainAttendanceTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (formAttendanceMainAttendanceTable.getColumnModel().getColumnCount() > 0) {
            formAttendanceMainAttendanceTable.getColumnModel().getColumn(0).setHeaderValue("Id");
            formAttendanceMainAttendanceTable.getColumnModel().getColumn(1).setHeaderValue("Nik");
            formAttendanceMainAttendanceTable.getColumnModel().getColumn(2).setHeaderValue("Full Name");
            formAttendanceMainAttendanceTable.getColumnModel().getColumn(3).setHeaderValue("Check In");
            formAttendanceMainAttendanceTable.getColumnModel().getColumn(4).setHeaderValue("Check Out");
            formAttendanceMainAttendanceTable.getColumnModel().getColumn(5).setHeaderValue("Location");
            formAttendanceMainAttendanceTable.getColumnModel().getColumn(6).setHeaderValue("Duration");
            formAttendanceMainAttendanceTable.getColumnModel().getColumn(7).setHeaderValue("Status");
            formAttendanceMainAttendanceTable.getColumnModel().getColumn(8).setHeaderValue("Information");
        }

        formDashboardMainAttendanceGenerate.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formDashboardMainAttendanceGenerate.setText("Generate Attendance Report");
        formDashboardMainAttendanceGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formDashboardMainAttendanceGenerateActionPerformed(evt);
            }
        });
        formDashboardMainAttendanceGenerate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formDashboardMainAttendanceGenerateKeyPressed(evt);
            }
        });

        formAttendanceMainAttendanceLebelFullName.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formAttendanceMainAttendanceLebelFullName.setText("Full Name");

        formAttendanceMainAttendanceLebelFrom.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formAttendanceMainAttendanceLebelFrom.setText("From");

        formAttendanceMainAttendanceLebelTo.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formAttendanceMainAttendanceLebelTo.setText("To");

        formAttendanceMainAttendanceTextFieldFullName.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N

        formAttendanceMainAttendanceJDateChooseFrom.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N

        formAttendanceMainAttendanceJDateChooseTo.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N

        formAttendanceMainAttendanceButtonSearch.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formAttendanceMainAttendanceButtonSearch.setText("Search");
        formAttendanceMainAttendanceButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formAttendanceMainAttendanceButtonSearchActionPerformed(evt);
            }
        });
        formAttendanceMainAttendanceButtonSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formAttendanceMainAttendanceButtonSearchKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout formAttendanceMainAttendancePanelLayout = new javax.swing.GroupLayout(formAttendanceMainAttendancePanel);
        formAttendanceMainAttendancePanel.setLayout(formAttendanceMainAttendancePanelLayout);
        formAttendanceMainAttendancePanelLayout.setHorizontalGroup(
            formAttendanceMainAttendancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formAttendanceMainAttendancePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(formAttendanceMainAttendanceLebelFullName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formAttendanceMainAttendanceTextFieldFullName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(formAttendanceMainAttendanceLebelFrom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formAttendanceMainAttendanceJDateChooseFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(formAttendanceMainAttendanceLebelTo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formAttendanceMainAttendanceJDateChooseTo, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(formAttendanceMainAttendanceButtonSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                .addContainerGap())
        );
        formAttendanceMainAttendancePanelLayout.setVerticalGroup(
            formAttendanceMainAttendancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formAttendanceMainAttendancePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(formAttendanceMainAttendancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(formAttendanceMainAttendanceLebelFrom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(formAttendanceMainAttendanceButtonSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(formAttendanceMainAttendanceJDateChooseTo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(formAttendanceMainAttendanceJDateChooseFrom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formAttendanceMainAttendancePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(formAttendanceMainAttendanceTextFieldFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(formAttendanceMainAttendanceLebelFullName))
                    .addComponent(formAttendanceMainAttendanceLebelTo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout formAttendanceMainAttendancePanelTableLayout = new javax.swing.GroupLayout(formAttendanceMainAttendancePanelTable);
        formAttendanceMainAttendancePanelTable.setLayout(formAttendanceMainAttendancePanelTableLayout);
        formAttendanceMainAttendancePanelTableLayout.setHorizontalGroup(
            formAttendanceMainAttendancePanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formAttendanceMainAttendancePanelTableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formAttendanceMainAttendancePanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 972, Short.MAX_VALUE)
                    .addComponent(formDashboardMainAttendanceGenerate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(formAttendanceMainAttendancePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        formAttendanceMainAttendancePanelTableLayout.setVerticalGroup(
            formAttendanceMainAttendancePanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formAttendanceMainAttendancePanelTableLayout.createSequentialGroup()
                .addComponent(formAttendanceMainAttendancePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 518, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formDashboardMainAttendanceGenerate)
                .addContainerGap())
        );

        javax.swing.GroupLayout formAttendancePanelMainLayout = new javax.swing.GroupLayout(formAttendancePanelMain);
        formAttendancePanelMain.setLayout(formAttendancePanelMainLayout);
        formAttendancePanelMainLayout.setHorizontalGroup(
            formAttendancePanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formAttendancePanelMainLayout.createSequentialGroup()
                .addGroup(formAttendancePanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(formAttendancePanelMainLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(formAttendanceMainLabelFullName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(formAttendanceMainButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(formAttendanceMainButtonLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(formAttendancePanelMainLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(formAttendanceMainAttendancePanelTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        formAttendancePanelMainLayout.setVerticalGroup(
            formAttendancePanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formAttendancePanelMainLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(formAttendancePanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formAttendanceMainButtonLogout)
                    .addComponent(formAttendanceMainLabelFullName)
                    .addComponent(formAttendanceMainButtonBack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formAttendanceMainAttendancePanelTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(formAttendancePanelHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(formAttendancePanelFooter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(formAttendancePanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(formAttendancePanelHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formAttendancePanelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(formAttendancePanelFooter, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        formAttendancePanelHeader.getAccessibleContext().setAccessibleName("");
        formAttendancePanelHeader.getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    LocalDateTime localDateTimeNow = LocalDateTime.now();
    DateTimeFormatter DATETIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    DateTimeFormatter DATETIME_PDF_FORMATTER = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");
    private List<String> access_menu = new ArrayList<>();
    private String full_name;

    public void setLabelId(String text) {
        formAttendanceHeaderLabelId.setText(text);
    }

    public void setLabelNik(String text) {
        formAttendanceHeaderLabelNik.setText(text);
    }

    public String getFullName() {
        return full_name;
    }

    public void setFullName(String text) {
        this.full_name = text;
        formAttendanceMainLabelFullName.setText("Welcome " + text + ",");
    }

    public List<String> getAccessMenu() {
        return access_menu;
    }

    public void setAccessMenu(List<String> value) {
        this.access_menu = value;
    }

    private List<Attendance> list_attendance;

    private void setListAttendance(List<Attendance> value) {
        this.list_attendance = value;
    }

    private List<Attendance> getListAttendance() {
        return list_attendance;
    }

    public void loadDataAttendance() {
        try {
            List<Attendance> listAttendance;
            if (formAttendanceHeaderLabelNik.getText().equals("hrd")
                    || formAttendanceHeaderLabelNik.getText().equals("admin")) {
                listAttendance = Attendance.listParams()
                        .withUsername("")
                        .withDateFrom(null)
                        .withDateTo(null)
                        .build();
            } else {
                listAttendance = Attendance.listParams()
                        .withUsername(formAttendanceHeaderLabelNik.getText())
                        .withDateFrom(null)
                        .withDateTo(null)
                        .build();
            }

            DefaultTableModel defaultTableModel = (DefaultTableModel) formAttendanceMainAttendanceTable.getModel();
            defaultTableModel.setRowCount(0);
            Object[] rows = new Object[9];
            for (int i = 0; i < listAttendance.size(); i++) {
                TableColumnModel tableColumnModel = formAttendanceMainAttendanceTable.getColumnModel();
                tableColumnModel.getColumn(0).setMaxWidth(0);
                tableColumnModel.getColumn(0).setMinWidth(0);

                rows[0] = listAttendance.get(i).getId();
                rows[1] = listAttendance.get(i).getUsername();
                rows[2] = listAttendance.get(i).getFullName();
                rows[3] = listAttendance.get(i).getCheckIn();
                rows[4] = listAttendance.get(i).getCheckOut();
                rows[5] = listAttendance.get(i).getLocation();
                rows[6] = String.format("%.0f", listAttendance.get(i).getDuration());
                rows[7] = listAttendance.get(i).getStatus();
                rows[8] = listAttendance.get(i).getInformation();

                defaultTableModel.addRow(rows);
            }
            formAttendanceMainAttendanceTable.setAutoCreateRowSorter(true);
            setListAttendance(listAttendance);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }

    public void searchDataAttendance() {
        try {
            Date dateFrom = formAttendanceMainAttendanceJDateChooseFrom.getDate();
            Date dateTo = formAttendanceMainAttendanceJDateChooseTo.getDate();
            SimpleDateFormat simpleDateFormatFrom = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            SimpleDateFormat simpleDateFormatTo = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            
            String keyword = formAttendanceMainAttendanceTextFieldFullName.getText();
            String date_from = null;
            String date_to = null;
            
            if(dateFrom != null && dateTo != null){
                date_from = simpleDateFormatFrom.format(dateFrom);
                date_to = simpleDateFormatTo.format(dateTo);
            }

            List<Attendance> listAttendance;
            if (formAttendanceHeaderLabelNik.getText().equals("hrd")
                    || formAttendanceHeaderLabelNik.getText().equals("admin")) {
                listAttendance = Attendance.listParams()
                        .withUsername(keyword)
                        .withDateFrom(date_from)
                        .withDateTo(date_to)
                        .build();
            } else {
                listAttendance = Attendance.listParams()
                        .withUsername(formAttendanceHeaderLabelNik.getText())
                        .withDateFrom(date_from)
                        .withDateTo(date_to)
                        .build();
            }

            DefaultTableModel defaultTableModel = (DefaultTableModel) formAttendanceMainAttendanceTable.getModel();
            defaultTableModel.setRowCount(0);
            Object[] rows = new Object[9];
            for (int i = 0; i < listAttendance.size(); i++) {
                TableColumnModel tableColumnModel = formAttendanceMainAttendanceTable.getColumnModel();
                tableColumnModel.getColumn(0).setMaxWidth(0);
                tableColumnModel.getColumn(0).setMinWidth(0);

                rows[0] = listAttendance.get(i).getId();
                rows[1] = listAttendance.get(i).getUsername();
                rows[2] = listAttendance.get(i).getFullName();
                rows[3] = listAttendance.get(i).getCheckIn();
                rows[4] = listAttendance.get(i).getCheckOut();
                rows[5] = listAttendance.get(i).getLocation();
                rows[6] = String.format("%.0f", listAttendance.get(i).getDuration());
                rows[7] = listAttendance.get(i).getStatus();
                rows[8] = listAttendance.get(i).getInformation();

                defaultTableModel.addRow(rows);
            }
            formAttendanceMainAttendanceTable.setAutoCreateRowSorter(true);
            setListAttendance(listAttendance);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }

    private boolean generateReport() {
        boolean result = false;
        Document document = new Document();
        try {
            //font setting
            Font bfBold12 = new Font(FontFamily.TIMES_ROMAN, 12, Font.BOLD, new BaseColor(Color.BLACK));
            Font bfNormal12 = new Font(FontFamily.TIMES_ROMAN, 12);

            //document header attributes
            document.addAuthor(Constanta.PdfDocument.DOCUMENT_AUTHOR);
            document.addCreationDate();
            document.addProducer();
            document.addCreator(Constanta.PdfDocument.DOCUMENT_CREATOR);
            document.addTitle(Constanta.PdfDocument.DOCUMENT_TITLE_ATTENDANCE);
            document.setPageSize(PageSize.A4.rotate());
            
            PdfWriter pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(
                    Constanta.PdfDocument.PATH + "Attendance" + localDateTimeNow.format(DATETIME_PDF_FORMATTER) + ".pdf"));
            document.open();

            PdfPTable pdfPTable = new PdfPTable(8);
            pdfPTable.setWidthPercentage(Constanta.PdfDocument.WIDTH_PERCENTAGE);
            pdfPTable.setSpacingBefore(Constanta.PdfDocument.SPACING_BEFORE);
            pdfPTable.setSpacingAfter(Constanta.PdfDocument.SPACING_AFTER);

            float[] columnWidth = {3f, 3f, 2f, 2f, 2f, 2f, 2f, 5f};
            pdfPTable.setWidths(columnWidth);

            insertCell(pdfPTable, "Nik", Element.ALIGN_CENTER, 1, bfBold12);
            insertCell(pdfPTable, "Full Name", Element.ALIGN_CENTER, 1, bfBold12);
            insertCell(pdfPTable, "Check In", Element.ALIGN_CENTER, 1, bfBold12);
            insertCell(pdfPTable, "Check Out", Element.ALIGN_CENTER, 1, bfBold12);
            insertCell(pdfPTable, "Location", Element.ALIGN_CENTER, 1, bfBold12);
            insertCell(pdfPTable, "Duration", Element.ALIGN_CENTER, 1, bfBold12);
            insertCell(pdfPTable, "Status", Element.ALIGN_CENTER, 1, bfBold12);
            insertCell(pdfPTable, "Information", Element.ALIGN_CENTER, 1, bfBold12);
            pdfPTable.setHeaderRows(1);

            for (int i = 0; i < getListAttendance().size(); i++) {
                insertCell(pdfPTable, getListAttendance().get(i).getUsername(), Element.ALIGN_LEFT, 1, bfNormal12);
                insertCell(pdfPTable, getListAttendance().get(i).getFullName(), Element.ALIGN_LEFT, 1, bfNormal12);
                insertCell(pdfPTable, getListAttendance().get(i).getCheckIn(), Element.ALIGN_CENTER, 1, bfNormal12);
                insertCell(pdfPTable, getListAttendance().get(i).getCheckOut(), Element.ALIGN_CENTER, 1, bfNormal12);
                insertCell(pdfPTable, getListAttendance().get(i).getLocation(), Element.ALIGN_LEFT, 1, bfNormal12);
                insertCell(pdfPTable, String.format("%.0f", getListAttendance().get(i).getDuration()), Element.ALIGN_RIGHT, 1, bfNormal12);
                insertCell(pdfPTable, getListAttendance().get(i).getStatus(), Element.ALIGN_CENTER, 1, bfNormal12);
                insertCell(pdfPTable, getListAttendance().get(i).getInformation(), Element.ALIGN_LEFT, 1, bfNormal12);
            }

            document.add(pdfPTable);
            document.close();
            pdfWriter.close();

            result = true;
        } catch (DocumentException | FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
            result = false;
        }
        return result;
    }

    private void insertCell(PdfPTable table, String text, int align, int colspan, Font font) {
        PdfPCell cell;
        text = text == null ? "" : text.trim();
        cell = new PdfPCell(new Phrase(text, font));
        cell.setHorizontalAlignment(align);
        cell.setColspan(colspan);

        if (text.trim().equalsIgnoreCase("")) {
            cell.setMinimumHeight(10f);
        }
        table.addCell(cell);
    }

    private void formAttendanceMainAttendanceTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formAttendanceMainAttendanceTableMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_formAttendanceMainAttendanceTableMouseClicked

    private void formAttendanceMainButtonLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formAttendanceMainButtonLogoutActionPerformed
        // TODO add your handling code here:
        try {
            int action = JOptionPane.showConfirmDialog(null,
                    Constanta.Messages.MESSAGE_CONFIRM_LOGOUT,
                    Constanta.Messages.BANNER_CONFIRM,
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);

            if (action == JOptionPane.YES_OPTION) {
                Login login = new Login();
                login.show();
                this.dispose();
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formAttendanceMainButtonLogoutActionPerformed

    private void formAttendanceMainButtonLogoutKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formAttendanceMainButtonLogoutKeyPressed
        // TODO add your handling code here:
        try {
            int action = JOptionPane.showConfirmDialog(null,
                    Constanta.Messages.MESSAGE_CONFIRM_LOGOUT,
                    Constanta.Messages.BANNER_CONFIRM,
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);

            if (action == JOptionPane.YES_OPTION) {
                Login login = new Login();
                login.show();
                this.dispose();
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formAttendanceMainButtonLogoutKeyPressed

    private void formAttendanceMainAttendanceButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formAttendanceMainAttendanceButtonSearchActionPerformed
        // TODO add your handling code here:
        try {
            searchDataAttendance();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formAttendanceMainAttendanceButtonSearchActionPerformed

    private void formAttendanceMainAttendanceButtonSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formAttendanceMainAttendanceButtonSearchKeyPressed
        // TODO add your handling code here:
        try {
            searchDataAttendance();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formAttendanceMainAttendanceButtonSearchKeyPressed

    private void formAttendanceMainButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formAttendanceMainButtonBackActionPerformed
        // TODO add your handling code here:
        try {
            Dashboard dashboard = new Dashboard();
            dashboard.show();
            dashboard.setLabelId(formAttendanceHeaderLabelId.getText());
            dashboard.setLabelNik(formAttendanceHeaderLabelNik.getText());
            dashboard.setFullName(getFullName());
            dashboard.setAccessMenu(getAccessMenu());
            dashboard.loadDataAttendance();
            dashboard.loadDataLeave();
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formAttendanceMainButtonBackActionPerformed

    private void formAttendanceMainButtonBackKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formAttendanceMainButtonBackKeyPressed
        // TODO add your handling code here:
        try {
            Dashboard dashboard = new Dashboard();
            dashboard.show();
            dashboard.setLabelId(formAttendanceHeaderLabelId.getText());
            dashboard.setLabelNik(formAttendanceHeaderLabelNik.getText());
            dashboard.setFullName(getFullName());
            dashboard.setAccessMenu(getAccessMenu());
            dashboard.loadDataAttendance();
            dashboard.loadDataLeave();
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formAttendanceMainButtonBackKeyPressed

    private void formDashboardMainAttendanceGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formDashboardMainAttendanceGenerateActionPerformed
        // TODO add your handling code here:
        try {
            boolean is_print = generateReport();
            if (is_print) {
                JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_SUCCESS);
            } else {
                JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_FAILED);
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formDashboardMainAttendanceGenerateActionPerformed

    private void formDashboardMainAttendanceGenerateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formDashboardMainAttendanceGenerateKeyPressed
        // TODO add your handling code here:
        try {
            boolean is_print = generateReport();
            if (is_print) {
                JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_SUCCESS);
            } else {
                JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_FAILED);
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formDashboardMainAttendanceGenerateKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AttendanceDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AttendanceDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AttendanceDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AttendanceDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AttendanceDetail().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel formAttendanceHeaderLabelId;
    public javax.swing.JLabel formAttendanceHeaderLabelNik;
    private javax.swing.JLabel formAttendanceHeaderLable;
    private javax.swing.JLabel formAttendanceLabelFooter2;
    private javax.swing.JButton formAttendanceMainAttendanceButtonSearch;
    private com.toedter.calendar.JDateChooser formAttendanceMainAttendanceJDateChooseFrom;
    private com.toedter.calendar.JDateChooser formAttendanceMainAttendanceJDateChooseTo;
    private javax.swing.JLabel formAttendanceMainAttendanceLebelFrom;
    private javax.swing.JLabel formAttendanceMainAttendanceLebelFullName;
    private javax.swing.JLabel formAttendanceMainAttendanceLebelTo;
    private javax.swing.JPanel formAttendanceMainAttendancePanel;
    private javax.swing.JPanel formAttendanceMainAttendancePanelTable;
    private javax.swing.JTable formAttendanceMainAttendanceTable;
    private javax.swing.JTextField formAttendanceMainAttendanceTextFieldFullName;
    private javax.swing.JButton formAttendanceMainButtonBack;
    private javax.swing.JButton formAttendanceMainButtonLogout;
    private javax.swing.JLabel formAttendanceMainLabelFullName;
    private javax.swing.JPanel formAttendancePanelFooter;
    private javax.swing.JPanel formAttendancePanelHeader;
    private javax.swing.JPanel formAttendancePanelMain;
    private javax.swing.JButton formDashboardMainAttendanceGenerate;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
