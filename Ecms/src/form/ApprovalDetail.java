package form;

import javax.swing.JOptionPane;
import config.Constanta;
import java.awt.HeadlessException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.HashMap;
import java.util.TreeMap;
import model.Leave;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 *
 */
public class ApprovalDetail extends javax.swing.JFrame {

    /**
     * Creates new form Login
     */
    public ApprovalDetail() {
        initComponents();
        formApprovalHeaderLabelId.setVisible(false);
        formApprovalHeaderLabelNik.setVisible(false);
        bindDataStatus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formApprovalPanelHeader = new javax.swing.JPanel();
        kGradientPanel2 = new keeptoo.KGradientPanel();
        formApprovalHeaderLable = new javax.swing.JLabel();
        formApprovalPanelFooter = new javax.swing.JPanel();
        kGradientPanel3 = new keeptoo.KGradientPanel();
        formApprovalHeaderLabelId = new javax.swing.JLabel();
        formApprovalHeaderLabelNik = new javax.swing.JLabel();
        formApprovalPanelMain = new javax.swing.JPanel();
        formApprovalMainLabelFullName = new javax.swing.JLabel();
        formApprovalMainButtonLogout = new javax.swing.JButton();
        formApprovalMainButtonBack = new javax.swing.JButton();
        formApprovalMainApprovalPanelTable = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        formApprovalMainApprovalTable = new javax.swing.JTable();
        formApprovalMainApprovalGenerate = new javax.swing.JButton();
        formApprovalMainApprovalPanel = new javax.swing.JPanel();
        formLeaveMainLeaveLebelFullName = new javax.swing.JLabel();
        formApprovalMainApprovalLebelStatus = new javax.swing.JLabel();
        formApprovalMainApprovalLebelFrom = new javax.swing.JLabel();
        formApprovalMainApprovalLebelTo = new javax.swing.JLabel();
        formApprovalMainApprovalTextFieldFullName = new javax.swing.JTextField();
        formApprovalMainApprovalJComboBoxStatus = new javax.swing.JComboBox<>();
        formApprovalMainApprovalJDateChooseFrom = new com.toedter.calendar.JDateChooser();
        formApprovalMainApprovalJDateChooseTo = new com.toedter.calendar.JDateChooser();
        formApprovalMainApprovalButtonSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Approval Detail");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setName("frameEmployee"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1280, 720));
        setResizable(false);
        setSize(new java.awt.Dimension(1280, 720));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        formApprovalPanelHeader.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        formApprovalPanelHeader.setPreferredSize(new java.awt.Dimension(1024, 100));

        kGradientPanel2.setkEndColor(new java.awt.Color(51, 153, 255));
        kGradientPanel2.setkGradientFocus(400);
        kGradientPanel2.setkStartColor(new java.awt.Color(0, 204, 204));

        formApprovalHeaderLable.setFont(new java.awt.Font("Roboto Medium", 0, 36)); // NOI18N
        formApprovalHeaderLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formApprovalHeaderLable.setIcon(new javax.swing.ImageIcon("D:\\dev\\.project\\ecms\\lib\\logo.png")); // NOI18N

        javax.swing.GroupLayout kGradientPanel2Layout = new javax.swing.GroupLayout(kGradientPanel2);
        kGradientPanel2.setLayout(kGradientPanel2Layout);
        kGradientPanel2Layout.setHorizontalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(formApprovalHeaderLable, javax.swing.GroupLayout.DEFAULT_SIZE, 1280, Short.MAX_VALUE)
        );
        kGradientPanel2Layout.setVerticalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(kGradientPanel2Layout.createSequentialGroup()
                .addComponent(formApprovalHeaderLable)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        formApprovalHeaderLable.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout formApprovalPanelHeaderLayout = new javax.swing.GroupLayout(formApprovalPanelHeader);
        formApprovalPanelHeader.setLayout(formApprovalPanelHeaderLayout);
        formApprovalPanelHeaderLayout.setHorizontalGroup(
            formApprovalPanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formApprovalPanelHeaderLayout.createSequentialGroup()
                .addComponent(kGradientPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        formApprovalPanelHeaderLayout.setVerticalGroup(
            formApprovalPanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formApprovalPanelHeaderLayout.createSequentialGroup()
                .addComponent(kGradientPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(formApprovalPanelHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 100));
        formApprovalPanelHeader.getAccessibleContext().setAccessibleName("");
        formApprovalPanelHeader.getAccessibleContext().setAccessibleDescription("");

        formApprovalPanelFooter.setPreferredSize(new java.awt.Dimension(1280, 50));

        kGradientPanel3.setkEndColor(new java.awt.Color(51, 153, 255));
        kGradientPanel3.setkGradientFocus(400);
        kGradientPanel3.setkStartColor(new java.awt.Color(0, 204, 204));

        formApprovalHeaderLabelId.setFont(new java.awt.Font("Roboto Light", 0, 8)); // NOI18N
        formApprovalHeaderLabelId.setText("Id");
        formApprovalHeaderLabelId.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        formApprovalHeaderLabelNik.setFont(new java.awt.Font("Roboto Light", 0, 8)); // NOI18N
        formApprovalHeaderLabelNik.setText("Nik");
        formApprovalHeaderLabelNik.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout kGradientPanel3Layout = new javax.swing.GroupLayout(kGradientPanel3);
        kGradientPanel3.setLayout(kGradientPanel3Layout);
        kGradientPanel3Layout.setHorizontalGroup(
            kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1280, Short.MAX_VALUE)
            .addGroup(kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(kGradientPanel3Layout.createSequentialGroup()
                    .addGap(628, 628, 628)
                    .addComponent(formApprovalHeaderLabelId)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(formApprovalHeaderLabelNik)
                    .addContainerGap(628, Short.MAX_VALUE)))
        );
        kGradientPanel3Layout.setVerticalGroup(
            kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
            .addGroup(kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(kGradientPanel3Layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addGroup(kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(formApprovalHeaderLabelId)
                        .addComponent(formApprovalHeaderLabelNik))
                    .addContainerGap(20, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout formApprovalPanelFooterLayout = new javax.swing.GroupLayout(formApprovalPanelFooter);
        formApprovalPanelFooter.setLayout(formApprovalPanelFooterLayout);
        formApprovalPanelFooterLayout.setHorizontalGroup(
            formApprovalPanelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        formApprovalPanelFooterLayout.setVerticalGroup(
            formApprovalPanelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(formApprovalPanelFooter, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 670, 1280, 50));

        formApprovalPanelMain.setBackground(new java.awt.Color(255, 255, 255));

        formApprovalMainLabelFullName.setFont(new java.awt.Font("Roboto Light", 1, 18)); // NOI18N
        formApprovalMainLabelFullName.setText("FullName");

        formApprovalMainButtonLogout.setBackground(new java.awt.Color(255, 255, 255));
        formApprovalMainButtonLogout.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formApprovalMainButtonLogout.setText("Logout");
        formApprovalMainButtonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formApprovalMainButtonLogoutActionPerformed(evt);
            }
        });
        formApprovalMainButtonLogout.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formApprovalMainButtonLogoutKeyPressed(evt);
            }
        });

        formApprovalMainButtonBack.setBackground(new java.awt.Color(255, 255, 255));
        formApprovalMainButtonBack.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formApprovalMainButtonBack.setText("Back");
        formApprovalMainButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formApprovalMainButtonBackActionPerformed(evt);
            }
        });
        formApprovalMainButtonBack.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formApprovalMainButtonBackKeyPressed(evt);
            }
        });

        formApprovalMainApprovalPanelTable.setBackground(new java.awt.Color(255, 255, 255));
        formApprovalMainApprovalPanelTable.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Attendance", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Roboto", 0, 11))); // NOI18N

        formApprovalMainApprovalTable.setFont(new java.awt.Font("Roboto Light", 0, 14)); // NOI18N
        formApprovalMainApprovalTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nik", "Full Name", "Request Date", "Date From", "Date To", "Reasons", "Type", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        formApprovalMainApprovalTable.setColumnSelectionAllowed(true);
        formApprovalMainApprovalTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        formApprovalMainApprovalTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formApprovalMainApprovalTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(formApprovalMainApprovalTable);
        formApprovalMainApprovalTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        formApprovalMainApprovalGenerate.setBackground(new java.awt.Color(51, 153, 255));
        formApprovalMainApprovalGenerate.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formApprovalMainApprovalGenerate.setText("Generate Approval Report");
        formApprovalMainApprovalGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formApprovalMainApprovalGenerateActionPerformed(evt);
            }
        });
        formApprovalMainApprovalGenerate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formApprovalMainApprovalGenerateKeyPressed(evt);
            }
        });

        formApprovalMainApprovalPanel.setBackground(java.awt.Color.white);

        formLeaveMainLeaveLebelFullName.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formLeaveMainLeaveLebelFullName.setText("Full Name");

        formApprovalMainApprovalLebelStatus.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formApprovalMainApprovalLebelStatus.setText("Status");

        formApprovalMainApprovalLebelFrom.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formApprovalMainApprovalLebelFrom.setText("From");

        formApprovalMainApprovalLebelTo.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formApprovalMainApprovalLebelTo.setText("To");

        formApprovalMainApprovalTextFieldFullName.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N

        formApprovalMainApprovalJComboBoxStatus.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N

        formApprovalMainApprovalJDateChooseFrom.setBackground(new java.awt.Color(255, 255, 255));
        formApprovalMainApprovalJDateChooseFrom.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N

        formApprovalMainApprovalJDateChooseTo.setBackground(new java.awt.Color(255, 255, 255));
        formApprovalMainApprovalJDateChooseTo.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N

        formApprovalMainApprovalButtonSearch.setBackground(new java.awt.Color(51, 153, 255));
        formApprovalMainApprovalButtonSearch.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formApprovalMainApprovalButtonSearch.setText("Search");
        formApprovalMainApprovalButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formApprovalMainApprovalButtonSearchActionPerformed(evt);
            }
        });
        formApprovalMainApprovalButtonSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formApprovalMainApprovalButtonSearchKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout formApprovalMainApprovalPanelLayout = new javax.swing.GroupLayout(formApprovalMainApprovalPanel);
        formApprovalMainApprovalPanel.setLayout(formApprovalMainApprovalPanelLayout);
        formApprovalMainApprovalPanelLayout.setHorizontalGroup(
            formApprovalMainApprovalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formApprovalMainApprovalPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(formLeaveMainLeaveLebelFullName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(formApprovalMainApprovalTextFieldFullName, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(formApprovalMainApprovalLebelStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formApprovalMainApprovalJComboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(formApprovalMainApprovalLebelFrom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formApprovalMainApprovalJDateChooseFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(formApprovalMainApprovalLebelTo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formApprovalMainApprovalJDateChooseTo, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formApprovalMainApprovalButtonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );
        formApprovalMainApprovalPanelLayout.setVerticalGroup(
            formApprovalMainApprovalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formApprovalMainApprovalPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(formApprovalMainApprovalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(formApprovalMainApprovalButtonSearch)
                    .addGroup(formApprovalMainApprovalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(formApprovalMainApprovalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(formApprovalMainApprovalTextFieldFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(formLeaveMainLeaveLebelFullName))
                        .addGroup(formApprovalMainApprovalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(formApprovalMainApprovalJComboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(formApprovalMainApprovalLebelStatus)
                            .addComponent(formApprovalMainApprovalLebelFrom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(formApprovalMainApprovalJDateChooseTo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(formApprovalMainApprovalJDateChooseFrom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(formApprovalMainApprovalLebelTo, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout formApprovalMainApprovalPanelTableLayout = new javax.swing.GroupLayout(formApprovalMainApprovalPanelTable);
        formApprovalMainApprovalPanelTable.setLayout(formApprovalMainApprovalPanelTableLayout);
        formApprovalMainApprovalPanelTableLayout.setHorizontalGroup(
            formApprovalMainApprovalPanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, formApprovalMainApprovalPanelTableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formApprovalMainApprovalPanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(formApprovalMainApprovalGenerate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(formApprovalMainApprovalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1238, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)))
        );
        formApprovalMainApprovalPanelTableLayout.setVerticalGroup(
            formApprovalMainApprovalPanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formApprovalMainApprovalPanelTableLayout.createSequentialGroup()
                .addComponent(formApprovalMainApprovalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(formApprovalMainApprovalGenerate)
                .addContainerGap())
        );

        javax.swing.GroupLayout formApprovalPanelMainLayout = new javax.swing.GroupLayout(formApprovalPanelMain);
        formApprovalPanelMain.setLayout(formApprovalPanelMainLayout);
        formApprovalPanelMainLayout.setHorizontalGroup(
            formApprovalPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formApprovalPanelMainLayout.createSequentialGroup()
                .addGroup(formApprovalPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(formApprovalPanelMainLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(formApprovalMainLabelFullName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(formApprovalMainButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(formApprovalMainButtonLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(formApprovalMainApprovalPanelTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 20, Short.MAX_VALUE))
        );
        formApprovalPanelMainLayout.setVerticalGroup(
            formApprovalPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formApprovalPanelMainLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(formApprovalPanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formApprovalMainButtonLogout)
                    .addComponent(formApprovalMainLabelFullName)
                    .addComponent(formApprovalMainButtonBack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formApprovalMainApprovalPanelTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        getContentPane().add(formApprovalPanelMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 99, 1280, 570));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    LocalDateTime localDateTimeNow = LocalDateTime.now();
    DateTimeFormatter DATETIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    DateTimeFormatter DATETIME_PDF_FORMATTER = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");
    private List<String> access_menu = new ArrayList<>();
    private String full_name;

    public void setLabelId(String text) {
        formApprovalHeaderLabelId.setText(text);
    }

    public void setLabelNik(String text) {
        formApprovalHeaderLabelNik.setText(text);
    }

    public String getFullName() {
        return full_name;
    }

    public void setFullName(String text) {
        this.full_name = text;
        formApprovalMainLabelFullName.setText("Welcome " + text + ",");
    }

    public List<String> getAccessMenu() {
        return access_menu;
    }

    public void setAccessMenu(List<String> value) {
        this.access_menu = value;
    }

    private List<Leave> list_leave;

    private void setListLeave(List<Leave> value) {
        this.list_leave = value;
    }

    private List<Leave> getListLeave() {
        return list_leave;
    }

    private void bindDataStatus() {
        try {
            Constanta.Leave constantaLeave = new Constanta.Leave();
            HashMap<String, Integer> map = constantaLeave.getStatus();
            TreeMap<String, Integer> sortMap = new TreeMap<>(map);
            sortMap.keySet().forEach((e) -> formApprovalMainApprovalJComboBoxStatus.addItem(e));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }

    public void loadDataApproval() {
        try {
            List<Leave> listLeave;
            listLeave = Leave.listParams()
                    .withUsername("")
                    .withStatus(Constanta.Leave.ALL)
                    .withDateFrom(null)
                    .withDateTo(null)
                    .buildApproval();

            DefaultTableModel defaultTableModel = (DefaultTableModel) formApprovalMainApprovalTable.getModel();
            defaultTableModel.setRowCount(0);
            Object[] rows = new Object[9];
            for (int i = 0; i < listLeave.size(); i++) {
                TableColumnModel tableColumnModel = formApprovalMainApprovalTable.getColumnModel();
                tableColumnModel.getColumn(0).setMaxWidth(0);
                tableColumnModel.getColumn(0).setMinWidth(0);

                rows[0] = listLeave.get(i).getId();
                rows[1] = listLeave.get(i).getUsername();
                rows[2] = listLeave.get(i).getFullName();
                rows[3] = listLeave.get(i).getRequestDate();
                rows[4] = listLeave.get(i).getDateFrom();
                rows[5] = listLeave.get(i).getDateTo();
                rows[6] = listLeave.get(i).getReasons();
                rows[7] = listLeave.get(i).getTypeName();
                rows[8] = listLeave.get(i).getStatus();

                defaultTableModel.addRow(rows);
            }
            formApprovalMainApprovalTable.setAutoCreateRowSorter(true);
            setListLeave(listLeave);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }

    public void searchDataApproval() {
        try {
            Date dateFrom = formApprovalMainApprovalJDateChooseFrom.getDate();
            Date dateTo = formApprovalMainApprovalJDateChooseTo.getDate();
            SimpleDateFormat simpleDateFormatFrom = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            SimpleDateFormat simpleDateFormatTo = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

            String keyword = formApprovalMainApprovalTextFieldFullName.getText();
            String status = formApprovalMainApprovalJComboBoxStatus.getSelectedItem().toString();
            String date_from = null;
            String date_to = null;

            if (dateFrom != null && dateTo != null) {
                date_from = simpleDateFormatFrom.format(dateFrom);
                date_to = simpleDateFormatTo.format(dateTo);
            }

            List<Leave> listLeave;
            listLeave = Leave.listParams()
                    .withUsername(keyword)
                    .withStatus(status)
                    .withDateFrom(date_from)
                    .withDateTo(date_to)
                    .buildApproval();

            DefaultTableModel defaultTableModel = (DefaultTableModel) formApprovalMainApprovalTable.getModel();
            defaultTableModel.setRowCount(0);
            Object[] rows = new Object[9];
            for (int i = 0; i < listLeave.size(); i++) {
                TableColumnModel tableColumnModel = formApprovalMainApprovalTable.getColumnModel();
                tableColumnModel.getColumn(0).setMaxWidth(0);
                tableColumnModel.getColumn(0).setMinWidth(0);

                rows[0] = listLeave.get(i).getId();
                rows[1] = listLeave.get(i).getUsername();
                rows[2] = listLeave.get(i).getFullName();
                rows[3] = listLeave.get(i).getRequestDate();
                rows[4] = listLeave.get(i).getDateFrom();
                rows[5] = listLeave.get(i).getDateTo();
                rows[6] = listLeave.get(i).getReasons();
                rows[7] = listLeave.get(i).getTypeName();
                rows[8] = listLeave.get(i).getStatus();

                defaultTableModel.addRow(rows);
            }
            formApprovalMainApprovalTable.setAutoCreateRowSorter(true);
            setListLeave(listLeave);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }

    private boolean generateReport() {
        boolean result = false;
        Document document = new Document();
        try {
            //font setting
            Font bfBold12 = new Font(FontFamily.TIMES_ROMAN, 12, Font.BOLD, new BaseColor(Color.BLACK));
            Font bfNormal12 = new Font(FontFamily.TIMES_ROMAN, 12);

            //document header attributes
            document.addAuthor(Constanta.PdfDocument.DOCUMENT_AUTHOR);
            document.addCreationDate();
            document.addProducer();
            document.addCreator(Constanta.PdfDocument.DOCUMENT_CREATOR);
            document.addTitle(Constanta.PdfDocument.DOCUMENT_TITLE_ATTENDANCE);
            document.setPageSize(PageSize.A4.rotate());

            PdfWriter pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(
                    Constanta.PdfDocument.PATH + "Approval" + localDateTimeNow.format(DATETIME_PDF_FORMATTER) + ".pdf"));
            document.open();

            PdfPTable pdfPTable = new PdfPTable(8);
            pdfPTable.setWidthPercentage(Constanta.PdfDocument.WIDTH_PERCENTAGE);
            pdfPTable.setSpacingBefore(Constanta.PdfDocument.SPACING_BEFORE);
            pdfPTable.setSpacingAfter(Constanta.PdfDocument.SPACING_AFTER);

            float[] columnWidth = {3f, 3f, 2f, 2f, 2f, 2f, 2f, 5f};
            pdfPTable.setWidths(columnWidth);
            
            insertCell(pdfPTable, "Report Approval", Element.ALIGN_CENTER, 8, 0, bfNormal12);
            pdfPTable.setHeaderRows(1);
            insertCell(pdfPTable, "Employee Content Management System", Element.ALIGN_CENTER, 8, 0, bfNormal12);
            pdfPTable.setHeaderRows(2);
            insertCell(pdfPTable, "", Element.ALIGN_CENTER, 8, 0, bfNormal12);
            pdfPTable.setHeaderRows(3);

            insertCell(pdfPTable, "Nik", Element.ALIGN_CENTER, 1, 1, bfBold12);
            insertCell(pdfPTable, "Full Name", Element.ALIGN_CENTER, 1, 1, bfBold12);
            insertCell(pdfPTable, "Request Date", Element.ALIGN_CENTER, 1, 1, bfBold12);
            insertCell(pdfPTable, "Date From", Element.ALIGN_CENTER, 1, 1, bfBold12);
            insertCell(pdfPTable, "Date To", Element.ALIGN_CENTER, 1, 1, bfBold12);
            insertCell(pdfPTable, "Reasons", Element.ALIGN_CENTER, 1, 1, bfBold12);
            insertCell(pdfPTable, "Type", Element.ALIGN_CENTER, 1, 1, bfBold12);
            insertCell(pdfPTable, "Status", Element.ALIGN_CENTER, 1, 1, bfBold12);
            pdfPTable.setHeaderRows(4);

            for (int i = 0; i < getListLeave().size(); i++) {
                insertCell(pdfPTable, getListLeave().get(i).getUsername(), Element.ALIGN_LEFT, 1, 1, bfNormal12);
                insertCell(pdfPTable, getListLeave().get(i).getFullName(), Element.ALIGN_LEFT, 1, 1, bfNormal12);
                insertCell(pdfPTable, getListLeave().get(i).getRequestDate(), Element.ALIGN_CENTER, 1, 1, bfNormal12);
                insertCell(pdfPTable, getListLeave().get(i).getDateFrom(), Element.ALIGN_CENTER, 1, 1, bfNormal12);
                insertCell(pdfPTable, getListLeave().get(i).getDateTo(), Element.ALIGN_LEFT, 1, 1, bfNormal12);
                insertCell(pdfPTable, getListLeave().get(i).getReasons(), Element.ALIGN_RIGHT, 1, 1, bfNormal12);
                insertCell(pdfPTable, getListLeave().get(i).getTypeName(), Element.ALIGN_CENTER, 1, 1, bfNormal12);
                insertCell(pdfPTable, getListLeave().get(i).getStatus(), Element.ALIGN_LEFT, 1, 1, bfNormal12);
            }

            document.add(pdfPTable);
            document.close();
            pdfWriter.close();

            result = true;
        } catch (DocumentException | FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
            result = false;
        }
        return result;
    }

    private void insertCell(PdfPTable table, String text, int align, int colspan, int border, Font font) {
        PdfPCell cell;
        text = text == null ? "" : text.trim();
        cell = new PdfPCell(new Phrase(text, font));
        cell.setHorizontalAlignment(align);
        cell.setColspan(colspan);
        if(border == 0){
            cell.setBorder(border);
        }

        if (text.trim().equalsIgnoreCase("")) {
            cell.setMinimumHeight(10f);
        }
        table.addCell(cell);
    }

    private void formApprovalMainApprovalTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formApprovalMainApprovalTableMouseClicked
        // TODO add your handling code here:
        try {
            Leave leave = new Leave();
            ApprovalProcess approvalProcess = new ApprovalProcess();
            int rowSelected = formApprovalMainApprovalTable.getSelectedRow();
            int selectedId = Integer.parseInt(formApprovalMainApprovalTable.getValueAt(rowSelected, 0).toString());

            leave = leave.get(selectedId);
            approvalProcess.show(true);
            approvalProcess.assignValue(leave);
            approvalProcess.setLabelId(formApprovalHeaderLabelId.getText());
            approvalProcess.setLabelNik(formApprovalHeaderLabelNik.getText());
            approvalProcess.setFullName(getFullName());
            approvalProcess.setAccessMenu(getAccessMenu());
            approvalProcess.loadDataAttachment(leave);
            this.dispose();
        } catch (NumberFormatException | SQLException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formApprovalMainApprovalTableMouseClicked

    private void formApprovalMainButtonLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formApprovalMainButtonLogoutActionPerformed
        // TODO add your handling code here:
        try {
            int action = JOptionPane.showConfirmDialog(null,
                    Constanta.Messages.MESSAGE_CONFIRM_LOGOUT,
                    Constanta.Messages.BANNER_CONFIRM,
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);

            if (action == JOptionPane.YES_OPTION) {
                Login login = new Login();
                login.show();
                this.dispose();
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formApprovalMainButtonLogoutActionPerformed

    private void formApprovalMainButtonLogoutKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formApprovalMainButtonLogoutKeyPressed
        // TODO add your handling code here:
        try {
            int action = JOptionPane.showConfirmDialog(null,
                    Constanta.Messages.MESSAGE_CONFIRM_LOGOUT,
                    Constanta.Messages.BANNER_CONFIRM,
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);

            if (action == JOptionPane.YES_OPTION) {
                Login login = new Login();
                login.show();
                this.dispose();
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formApprovalMainButtonLogoutKeyPressed

    private void formApprovalMainApprovalButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formApprovalMainApprovalButtonSearchActionPerformed
        // TODO add your handling code here:
        try {
            searchDataApproval();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formApprovalMainApprovalButtonSearchActionPerformed

    private void formApprovalMainApprovalButtonSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formApprovalMainApprovalButtonSearchKeyPressed
        // TODO add your handling code here:
        try {
            searchDataApproval();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formApprovalMainApprovalButtonSearchKeyPressed

    private void formApprovalMainButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formApprovalMainButtonBackActionPerformed
        // TODO add your handling code here:
        try {
            Dashboard dashboard = new Dashboard();
            dashboard.show();
            dashboard.setLabelId(formApprovalHeaderLabelId.getText());
            dashboard.setLabelNik(formApprovalHeaderLabelNik.getText());
            dashboard.setFullName(getFullName());
            dashboard.setAccessMenu(getAccessMenu());
            dashboard.loadDataAttendance();
            dashboard.loadDataLeave();
            dashboard.loadDataPayslip();
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formApprovalMainButtonBackActionPerformed

    private void formApprovalMainButtonBackKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formApprovalMainButtonBackKeyPressed
        // TODO add your handling code here:
        try {
            Dashboard dashboard = new Dashboard();
            dashboard.show();
            dashboard.setLabelId(formApprovalHeaderLabelId.getText());
            dashboard.setLabelNik(formApprovalHeaderLabelNik.getText());
            dashboard.setFullName(getFullName());
            dashboard.setAccessMenu(getAccessMenu());
            dashboard.loadDataAttendance();
            dashboard.loadDataLeave();
            dashboard.loadDataPayslip();
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formApprovalMainButtonBackKeyPressed

    private void formApprovalMainApprovalGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formApprovalMainApprovalGenerateActionPerformed
        // TODO add your handling code here:
        try {
            boolean is_print = generateReport();
            if (is_print) {
                JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_SUCCESS);
            } else {
                JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_FAILED);
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formApprovalMainApprovalGenerateActionPerformed

    private void formApprovalMainApprovalGenerateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formApprovalMainApprovalGenerateKeyPressed
        // TODO add your handling code here:
        try {
            boolean is_print = generateReport();
            if (is_print) {
                JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_SUCCESS);
            } else {
                JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_FAILED);
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formApprovalMainApprovalGenerateKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ApprovalDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ApprovalDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ApprovalDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApprovalDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ApprovalDetail().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel formApprovalHeaderLabelId;
    public javax.swing.JLabel formApprovalHeaderLabelNik;
    private javax.swing.JLabel formApprovalHeaderLable;
    private javax.swing.JButton formApprovalMainApprovalButtonSearch;
    private javax.swing.JButton formApprovalMainApprovalGenerate;
    private javax.swing.JComboBox<String> formApprovalMainApprovalJComboBoxStatus;
    private com.toedter.calendar.JDateChooser formApprovalMainApprovalJDateChooseFrom;
    private com.toedter.calendar.JDateChooser formApprovalMainApprovalJDateChooseTo;
    private javax.swing.JLabel formApprovalMainApprovalLebelFrom;
    private javax.swing.JLabel formApprovalMainApprovalLebelStatus;
    private javax.swing.JLabel formApprovalMainApprovalLebelTo;
    private javax.swing.JPanel formApprovalMainApprovalPanel;
    private javax.swing.JPanel formApprovalMainApprovalPanelTable;
    private javax.swing.JTable formApprovalMainApprovalTable;
    private javax.swing.JTextField formApprovalMainApprovalTextFieldFullName;
    private javax.swing.JButton formApprovalMainButtonBack;
    private javax.swing.JButton formApprovalMainButtonLogout;
    private javax.swing.JLabel formApprovalMainLabelFullName;
    private javax.swing.JPanel formApprovalPanelFooter;
    private javax.swing.JPanel formApprovalPanelHeader;
    private javax.swing.JPanel formApprovalPanelMain;
    private javax.swing.JLabel formLeaveMainLeaveLebelFullName;
    private javax.swing.JScrollPane jScrollPane2;
    private keeptoo.KGradientPanel kGradientPanel2;
    private keeptoo.KGradientPanel kGradientPanel3;
    // End of variables declaration//GEN-END:variables
}
