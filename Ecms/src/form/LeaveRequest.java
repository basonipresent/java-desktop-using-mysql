package form;

import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import javax.swing.JOptionPane;
import config.Constanta;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.TreeMap;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import model.Attachment;
import model.Leave;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 *
 */
public class LeaveRequest extends javax.swing.JFrame {

    /**
     * Creates new form Login
     */
    public LeaveRequest() {
        initComponents();
        formRequestLeaveHeaderLabelId.setVisible(false);
        formRequestLeaveHeaderLabelNik.setVisible(false);
        formRequestLeaveHeaderLabelIsUpdate.setVisible(false);
        formRequestLeaveHeaderLabelIdLeave.setVisible(false);
        formRequestLeaveHeaderLabelIsUpdate.setText(Constanta.Default.DEFAULT_VALUE);
        formRequestLeaveHeaderLabelIdLeave.setText(Constanta.Default.DEFAULT_VALUE);
        bindDataStatusLeave();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formRequestLeavePanelHeader = new javax.swing.JPanel();
        kGradientPanel2 = new keeptoo.KGradientPanel();
        formRequestLeaveHeaderLable = new javax.swing.JLabel();
        formRequestLeavePanelFooter = new javax.swing.JPanel();
        kGradientPanel3 = new keeptoo.KGradientPanel();
        formRequestLeaveHeaderLabelId = new javax.swing.JLabel();
        formRequestLeaveHeaderLabelIsUpdate = new javax.swing.JLabel();
        formRequestLeaveHeaderLabelIdLeave = new javax.swing.JLabel();
        formRequestLeaveHeaderLabelNik = new javax.swing.JLabel();
        formRequestLeavePanelMain = new javax.swing.JPanel();
        formRequestLeaveMainLabelFullName = new javax.swing.JLabel();
        formRequestLeaveMainButtonBack = new javax.swing.JButton();
        formRequestLeaveMainButtonLogout = new javax.swing.JButton();
        formRequestLeaveMainPanelForm = new javax.swing.JPanel();
        formRequestLeaveMainLabelType = new javax.swing.JLabel();
        formRequestLeaveMainLabelFrom = new javax.swing.JLabel();
        formRequestLeaveMainLabelReasons = new javax.swing.JLabel();
        formRequestLeaveMainLabelFile = new javax.swing.JLabel();
        formRequestLeaveMainLabelTo = new javax.swing.JLabel();
        formRequestLeaveMainComboBoxType = new javax.swing.JComboBox<>();
        formRequestLeaveMainButtonChooseFile = new javax.swing.JButton();
        formRequestLeaveMainDateChooserFrom = new com.toedter.calendar.JDateChooser();
        formRequestLeaveMainDateChooserTo = new com.toedter.calendar.JDateChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        formRequestLeaveMainTextAreaReasons = new javax.swing.JTextArea();
        formRequestLeaveMainPanelButton = new javax.swing.JPanel();
        formRequestLeaveMainButtonSave = new javax.swing.JButton();
        formRequestLeaveMainButtonSubmit = new javax.swing.JButton();
        formRequestLeaveMainButtonDelete = new javax.swing.JButton();
        formRequestLeaveMainButtonPrint = new javax.swing.JButton();
        formRequestLeaveMainPanelFiles = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        formRequestLeaveMainTableAttachment = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Leave Request");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(1280, 720));
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setName("frameEmployee"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(1280, 720));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        formRequestLeavePanelHeader.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        formRequestLeavePanelHeader.setMaximumSize(new java.awt.Dimension(1280, 70));
        formRequestLeavePanelHeader.setMinimumSize(new java.awt.Dimension(1280, 70));
        formRequestLeavePanelHeader.setPreferredSize(new java.awt.Dimension(1280, 100));

        kGradientPanel2.setkEndColor(new java.awt.Color(51, 153, 255));
        kGradientPanel2.setkGradientFocus(400);
        kGradientPanel2.setkStartColor(new java.awt.Color(0, 204, 204));
        kGradientPanel2.setPreferredSize(new java.awt.Dimension(1280, 100));

        formRequestLeaveHeaderLable.setFont(new java.awt.Font("Roboto Medium", 0, 36)); // NOI18N
        formRequestLeaveHeaderLable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formRequestLeaveHeaderLable.setIcon(new javax.swing.ImageIcon("D:\\dev\\.project\\ecms\\lib\\logo.png")); // NOI18N

        javax.swing.GroupLayout kGradientPanel2Layout = new javax.swing.GroupLayout(kGradientPanel2);
        kGradientPanel2.setLayout(kGradientPanel2Layout);
        kGradientPanel2Layout.setHorizontalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(formRequestLeaveHeaderLable, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1280, Short.MAX_VALUE))
        );
        kGradientPanel2Layout.setVerticalGroup(
            kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 101, Short.MAX_VALUE)
            .addGroup(kGradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(kGradientPanel2Layout.createSequentialGroup()
                    .addGap(2, 2, 2)
                    .addComponent(formRequestLeaveHeaderLable, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                    .addGap(3, 3, 3)))
        );

        formRequestLeaveHeaderLable.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout formRequestLeavePanelHeaderLayout = new javax.swing.GroupLayout(formRequestLeavePanelHeader);
        formRequestLeavePanelHeader.setLayout(formRequestLeavePanelHeaderLayout);
        formRequestLeavePanelHeaderLayout.setHorizontalGroup(
            formRequestLeavePanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        formRequestLeavePanelHeaderLayout.setVerticalGroup(
            formRequestLeavePanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
        );

        getContentPane().add(formRequestLeavePanelHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
        formRequestLeavePanelHeader.getAccessibleContext().setAccessibleName("");
        formRequestLeavePanelHeader.getAccessibleContext().setAccessibleDescription("");

        formRequestLeavePanelFooter.setPreferredSize(new java.awt.Dimension(1280, 50));

        kGradientPanel3.setkEndColor(new java.awt.Color(51, 153, 255));
        kGradientPanel3.setkGradientFocus(400);
        kGradientPanel3.setkStartColor(new java.awt.Color(0, 204, 204));

        formRequestLeaveHeaderLabelId.setFont(new java.awt.Font("Roboto Light", 0, 8)); // NOI18N
        formRequestLeaveHeaderLabelId.setText("Id");
        formRequestLeaveHeaderLabelId.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        formRequestLeaveHeaderLabelIsUpdate.setFont(new java.awt.Font("Roboto Light", 0, 8)); // NOI18N
        formRequestLeaveHeaderLabelIsUpdate.setText("IsUpdate");
        formRequestLeaveHeaderLabelIsUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        formRequestLeaveHeaderLabelIdLeave.setFont(new java.awt.Font("Roboto Light", 0, 8)); // NOI18N
        formRequestLeaveHeaderLabelIdLeave.setText("IdEmployee");
        formRequestLeaveHeaderLabelIdLeave.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        formRequestLeaveHeaderLabelNik.setFont(new java.awt.Font("Roboto Light", 0, 8)); // NOI18N
        formRequestLeaveHeaderLabelNik.setText("Nik");
        formRequestLeaveHeaderLabelNik.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout kGradientPanel3Layout = new javax.swing.GroupLayout(kGradientPanel3);
        kGradientPanel3.setLayout(kGradientPanel3Layout);
        kGradientPanel3Layout.setHorizontalGroup(
            kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1280, Short.MAX_VALUE)
            .addGroup(kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(kGradientPanel3Layout.createSequentialGroup()
                    .addGap(449, 449, 449)
                    .addComponent(formRequestLeaveHeaderLabelId)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(formRequestLeaveHeaderLabelIsUpdate)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(formRequestLeaveHeaderLabelIdLeave)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(formRequestLeaveHeaderLabelNik)
                    .addContainerGap(705, Short.MAX_VALUE)))
        );
        kGradientPanel3Layout.setVerticalGroup(
            kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
            .addGroup(kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(kGradientPanel3Layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addGroup(kGradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(formRequestLeaveHeaderLabelId)
                        .addComponent(formRequestLeaveHeaderLabelIsUpdate)
                        .addComponent(formRequestLeaveHeaderLabelIdLeave)
                        .addComponent(formRequestLeaveHeaderLabelNik))
                    .addContainerGap(23, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout formRequestLeavePanelFooterLayout = new javax.swing.GroupLayout(formRequestLeavePanelFooter);
        formRequestLeavePanelFooter.setLayout(formRequestLeavePanelFooterLayout);
        formRequestLeavePanelFooterLayout.setHorizontalGroup(
            formRequestLeavePanelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        formRequestLeavePanelFooterLayout.setVerticalGroup(
            formRequestLeavePanelFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(kGradientPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(formRequestLeavePanelFooter, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 670, -1, -1));

        formRequestLeavePanelMain.setBackground(new java.awt.Color(255, 255, 255));
        formRequestLeavePanelMain.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formRequestLeavePanelMain.setPreferredSize(new java.awt.Dimension(1280, 570));

        formRequestLeaveMainLabelFullName.setFont(new java.awt.Font("Roboto Light", 1, 18)); // NOI18N
        formRequestLeaveMainLabelFullName.setText("FullName");

        formRequestLeaveMainButtonBack.setBackground(new java.awt.Color(255, 255, 255));
        formRequestLeaveMainButtonBack.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formRequestLeaveMainButtonBack.setText("Back");
        formRequestLeaveMainButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formRequestLeaveMainButtonBackActionPerformed(evt);
            }
        });
        formRequestLeaveMainButtonBack.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formRequestLeaveMainButtonBackKeyPressed(evt);
            }
        });

        formRequestLeaveMainButtonLogout.setBackground(new java.awt.Color(255, 255, 255));
        formRequestLeaveMainButtonLogout.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formRequestLeaveMainButtonLogout.setText("Logout");
        formRequestLeaveMainButtonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formRequestLeaveMainButtonLogoutActionPerformed(evt);
            }
        });
        formRequestLeaveMainButtonLogout.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formRequestLeaveMainButtonLogoutKeyPressed(evt);
            }
        });

        formRequestLeaveMainPanelForm.setBackground(new java.awt.Color(255, 255, 255));
        formRequestLeaveMainPanelForm.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        formRequestLeaveMainLabelType.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formRequestLeaveMainLabelType.setText("Type*");

        formRequestLeaveMainLabelFrom.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formRequestLeaveMainLabelFrom.setText("From*");

        formRequestLeaveMainLabelReasons.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formRequestLeaveMainLabelReasons.setText("Reasons*");

        formRequestLeaveMainLabelFile.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formRequestLeaveMainLabelFile.setText("File*");

        formRequestLeaveMainLabelTo.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formRequestLeaveMainLabelTo.setText("To*");

        formRequestLeaveMainComboBoxType.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N

        formRequestLeaveMainButtonChooseFile.setBackground(java.awt.Color.white);
        formRequestLeaveMainButtonChooseFile.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formRequestLeaveMainButtonChooseFile.setText("Choose File");
        formRequestLeaveMainButtonChooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formRequestLeaveMainButtonChooseFileActionPerformed(evt);
            }
        });
        formRequestLeaveMainButtonChooseFile.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formRequestLeaveMainButtonChooseFileKeyPressed(evt);
            }
        });

        formRequestLeaveMainDateChooserFrom.setBackground(java.awt.Color.white);
        formRequestLeaveMainDateChooserFrom.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formRequestLeaveMainDateChooserFrom.setMinimumSize(new java.awt.Dimension(400, 28));
        formRequestLeaveMainDateChooserFrom.setPreferredSize(new java.awt.Dimension(400, 28));

        formRequestLeaveMainDateChooserTo.setBackground(java.awt.Color.white);
        formRequestLeaveMainDateChooserTo.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formRequestLeaveMainDateChooserTo.setMinimumSize(new java.awt.Dimension(400, 28));
        formRequestLeaveMainDateChooserTo.setPreferredSize(new java.awt.Dimension(400, 28));

        formRequestLeaveMainTextAreaReasons.setColumns(20);
        formRequestLeaveMainTextAreaReasons.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formRequestLeaveMainTextAreaReasons.setRows(5);
        jScrollPane1.setViewportView(formRequestLeaveMainTextAreaReasons);

        javax.swing.GroupLayout formRequestLeaveMainPanelFormLayout = new javax.swing.GroupLayout(formRequestLeaveMainPanelForm);
        formRequestLeaveMainPanelForm.setLayout(formRequestLeaveMainPanelFormLayout);
        formRequestLeaveMainPanelFormLayout.setHorizontalGroup(
            formRequestLeaveMainPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formRequestLeaveMainPanelFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formRequestLeaveMainPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(formRequestLeaveMainLabelType)
                    .addComponent(formRequestLeaveMainLabelFrom)
                    .addComponent(formRequestLeaveMainLabelReasons))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                .addGroup(formRequestLeaveMainPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(formRequestLeaveMainPanelFormLayout.createSequentialGroup()
                        .addGroup(formRequestLeaveMainPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(formRequestLeaveMainDateChooserFrom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(formRequestLeaveMainComboBoxType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(61, 61, 61)
                        .addGroup(formRequestLeaveMainPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(formRequestLeaveMainLabelTo)
                            .addComponent(formRequestLeaveMainLabelFile))
                        .addGap(140, 140, 140)
                        .addGroup(formRequestLeaveMainPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(formRequestLeaveMainButtonChooseFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(formRequestLeaveMainDateChooserTo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        formRequestLeaveMainPanelFormLayout.setVerticalGroup(
            formRequestLeaveMainPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formRequestLeaveMainPanelFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formRequestLeaveMainPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formRequestLeaveMainLabelType)
                    .addComponent(formRequestLeaveMainLabelFile)
                    .addComponent(formRequestLeaveMainComboBoxType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(formRequestLeaveMainButtonChooseFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(formRequestLeaveMainPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(formRequestLeaveMainPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(formRequestLeaveMainPanelFormLayout.createSequentialGroup()
                            .addGroup(formRequestLeaveMainPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(formRequestLeaveMainLabelTo)
                                .addComponent(formRequestLeaveMainLabelFrom))
                            .addGap(6, 6, 6))
                        .addComponent(formRequestLeaveMainDateChooserFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(formRequestLeaveMainDateChooserTo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(formRequestLeaveMainPanelFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(formRequestLeaveMainLabelReasons))
                .addContainerGap())
        );

        formRequestLeaveMainPanelButton.setBackground(new java.awt.Color(255, 255, 255));

        formRequestLeaveMainButtonSave.setBackground(new java.awt.Color(51, 153, 255));
        formRequestLeaveMainButtonSave.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formRequestLeaveMainButtonSave.setText("Save Draf");
        formRequestLeaveMainButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formRequestLeaveMainButtonSaveActionPerformed(evt);
            }
        });
        formRequestLeaveMainButtonSave.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formRequestLeaveMainButtonSaveKeyPressed(evt);
            }
        });

        formRequestLeaveMainButtonSubmit.setBackground(new java.awt.Color(51, 153, 255));
        formRequestLeaveMainButtonSubmit.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formRequestLeaveMainButtonSubmit.setText("Submit");
        formRequestLeaveMainButtonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formRequestLeaveMainButtonSubmitActionPerformed(evt);
            }
        });
        formRequestLeaveMainButtonSubmit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formRequestLeaveMainButtonSubmitKeyPressed(evt);
            }
        });

        formRequestLeaveMainButtonDelete.setBackground(new java.awt.Color(51, 153, 255));
        formRequestLeaveMainButtonDelete.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formRequestLeaveMainButtonDelete.setText("Delete");
        formRequestLeaveMainButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formRequestLeaveMainButtonDeleteActionPerformed(evt);
            }
        });
        formRequestLeaveMainButtonDelete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formRequestLeaveMainButtonDeleteKeyPressed(evt);
            }
        });

        formRequestLeaveMainButtonPrint.setBackground(new java.awt.Color(51, 153, 255));
        formRequestLeaveMainButtonPrint.setFont(new java.awt.Font("Roboto Light", 0, 18)); // NOI18N
        formRequestLeaveMainButtonPrint.setText("Print");
        formRequestLeaveMainButtonPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formRequestLeaveMainButtonPrintActionPerformed(evt);
            }
        });
        formRequestLeaveMainButtonPrint.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formRequestLeaveMainButtonPrintKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout formRequestLeaveMainPanelButtonLayout = new javax.swing.GroupLayout(formRequestLeaveMainPanelButton);
        formRequestLeaveMainPanelButton.setLayout(formRequestLeaveMainPanelButtonLayout);
        formRequestLeaveMainPanelButtonLayout.setHorizontalGroup(
            formRequestLeaveMainPanelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formRequestLeaveMainPanelButtonLayout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(formRequestLeaveMainButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(formRequestLeaveMainButtonSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(formRequestLeaveMainButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(formRequestLeaveMainButtonPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        formRequestLeaveMainPanelButtonLayout.setVerticalGroup(
            formRequestLeaveMainPanelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formRequestLeaveMainPanelButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formRequestLeaveMainPanelButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formRequestLeaveMainButtonSubmit)
                    .addComponent(formRequestLeaveMainButtonSave)
                    .addComponent(formRequestLeaveMainButtonDelete)
                    .addComponent(formRequestLeaveMainButtonPrint))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        formRequestLeaveMainPanelFiles.setBackground(new java.awt.Color(255, 255, 255));
        formRequestLeaveMainPanelFiles.setBorder(javax.swing.BorderFactory.createTitledBorder("List of files"));

        formRequestLeaveMainTableAttachment.setFont(new java.awt.Font("Roboto", 0, 14)); // NOI18N
        formRequestLeaveMainTableAttachment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Id Leave", "File Name", "File Path"
            }
        ));
        formRequestLeaveMainTableAttachment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formRequestLeaveMainTableAttachmentMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(formRequestLeaveMainTableAttachment);

        javax.swing.GroupLayout formRequestLeaveMainPanelFilesLayout = new javax.swing.GroupLayout(formRequestLeaveMainPanelFiles);
        formRequestLeaveMainPanelFiles.setLayout(formRequestLeaveMainPanelFilesLayout);
        formRequestLeaveMainPanelFilesLayout.setHorizontalGroup(
            formRequestLeaveMainPanelFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formRequestLeaveMainPanelFilesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        formRequestLeaveMainPanelFilesLayout.setVerticalGroup(
            formRequestLeaveMainPanelFilesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formRequestLeaveMainPanelFilesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout formRequestLeavePanelMainLayout = new javax.swing.GroupLayout(formRequestLeavePanelMain);
        formRequestLeavePanelMain.setLayout(formRequestLeavePanelMainLayout);
        formRequestLeavePanelMainLayout.setHorizontalGroup(
            formRequestLeavePanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formRequestLeavePanelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formRequestLeavePanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(formRequestLeavePanelMainLayout.createSequentialGroup()
                        .addComponent(formRequestLeaveMainLabelFullName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 910, Short.MAX_VALUE)
                        .addComponent(formRequestLeaveMainButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(formRequestLeaveMainButtonLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(formRequestLeaveMainPanelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(formRequestLeaveMainPanelForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(formRequestLeaveMainPanelFiles, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        formRequestLeavePanelMainLayout.setVerticalGroup(
            formRequestLeavePanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formRequestLeavePanelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(formRequestLeavePanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(formRequestLeaveMainButtonLogout)
                    .addComponent(formRequestLeaveMainLabelFullName)
                    .addComponent(formRequestLeaveMainButtonBack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(formRequestLeaveMainPanelForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(formRequestLeaveMainPanelFiles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(formRequestLeaveMainPanelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        getContentPane().add(formRequestLeavePanelMain, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    LocalDateTime localDateTimeNow = LocalDateTime.now();
    DateTimeFormatter DATETIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm");
    DateTimeFormatter DATETIME_PDF_FORMATTER = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");
    private List<String> access_menu = new ArrayList<>();
    private String full_name;
    private Leave leave;
    public List<Attachment> list_attachments = new ArrayList<>();

    public void setLabelId(String text) {
        formRequestLeaveHeaderLabelId.setText(text);
    }

    public void setLabelNik(String text) {
        formRequestLeaveHeaderLabelNik.setText(text);
    }

    public String getFullName() {
        return full_name;
    }

    public void setFullName(String text) {
        this.full_name = text;
        formRequestLeaveMainLabelFullName.setText("Welcome " + text + ",");
    }

    public List<String> getAccessMenu() {
        return access_menu;
    }

    public void setAccessMenu(List<String> value) {
        this.access_menu = value;
    }

    public void setLeave(Leave value) {
        this.leave = value;
    }

    public Leave getLeave() {
        return leave;
    }
    
    public void setListAttachment(List<Attachment> value) {
        this.list_attachments = value;
    }

    public List<Attachment> getListAttachment() {
        return list_attachments;
    }

    private void bindDataStatusLeave() {
        try {
            Constanta.Leave constantaLeave = new Constanta.Leave();
            HashMap<String, Integer> map = constantaLeave.getTypes();
            TreeMap<String, Integer> sortMap = new TreeMap<>(map);
            sortMap.keySet().forEach((e) -> formRequestLeaveMainComboBoxType.addItem(e));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }

    public void loadDataAttachment(List<Attachment> list) {
        DefaultTableModel defaultTableModel = (DefaultTableModel) formRequestLeaveMainTableAttachment.getModel();
        defaultTableModel.setRowCount(0);
        Object[] rows = new Object[9];
        for (int i = 0; i < list.size(); i++) {
            TableColumnModel tableColumnModel = formRequestLeaveMainTableAttachment.getColumnModel();
            tableColumnModel.getColumn(0).setMaxWidth(0);
            tableColumnModel.getColumn(0).setMinWidth(0);

            tableColumnModel.getColumn(1).setMaxWidth(0);
            tableColumnModel.getColumn(1).setMinWidth(0);

            rows[0] = list.get(i).getId();
            rows[1] = list.get(i).getIdLeave();
            rows[2] = list.get(i).getFileName();
            rows[3] = list.get(i).getFilePath();

            defaultTableModel.addRow(rows);
        }
        formRequestLeaveMainTableAttachment.setAutoCreateRowSorter(true);
    }

    private void uploadFiles() {
        JFrame parentFrame = new JFrame();

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select file");
        fileChooser.setMultiSelectionEnabled(true);

        fileChooser.removeChoosableFileFilter(fileChooser.getAcceptAllFileFilter());
        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("Image files", "jpg", "bmp", "png", "gif", "tiff", "jpeg", "tif");
        fileChooser.setFileFilter(fileFilter);
        Dimension dimension = new Dimension();
        dimension.height = 480;
        dimension.width = 720;
        fileChooser.setPreferredSize(dimension);

        int userSelection = fileChooser.showSaveDialog(parentFrame);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File[] files = fileChooser.getSelectedFiles();
            for (File file : files) {
                Attachment attachment = new Attachment();
                attachment.setFilePath(file.getAbsolutePath().replace("\\", "\\\\"));
                attachment.setFileName(file.getName());
                list_attachments.add(attachment);
            }
        }
        setListAttachment(list_attachments);
        loadDataAttachment(getListAttachment());
    }

    private boolean submit(String action) throws SQLException {
        boolean result = true;
        Date dateFrom = formRequestLeaveMainDateChooserFrom.getDate();
        Date dateTo = formRequestLeaveMainDateChooserTo.getDate();
        SimpleDateFormat simpleDateFormatFrom = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        SimpleDateFormat simpleDateFormatTo = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        String date_from = null;
        String date_to = null;

        if (dateFrom != null && dateTo != null) {
            date_from = simpleDateFormatFrom.format(dateFrom);
            date_to = simpleDateFormatTo.format(dateTo);
        } else {
            JOptionPane.showConfirmDialog(null, Constanta.Messages.MESSAGE_INVALID);
            return false;
        }

        Leave leave = new Leave();
        Constanta.Leave constantaLeave = new Constanta.Leave();
        HashMap<String, Integer> map = constantaLeave.getTypes();
        int type_id = Integer.parseInt(map.get(formRequestLeaveMainComboBoxType.getSelectedItem().toString()).toString());
        leave.setIdType(type_id);
        leave.setUsername(formRequestLeaveHeaderLabelNik.getText());
        leave.setRequestDate(localDateTimeNow.format(DATETIME_FORMATTER));
        leave.setDateFrom(date_from);
        leave.setDateTo(date_to);
        leave.setReasons(formRequestLeaveMainTextAreaReasons.getText());
        leave.setStatus(action);
        leave.setListAttachment(getListAttachment());

        if (formRequestLeaveHeaderLabelIsUpdate.getText().equals("1")) {
            leave.setId(Integer.parseInt(formRequestLeaveHeaderLabelIdLeave.getText()));
            result = leave.update(leave);
        } else {
            result = leave.create(leave);
        }

        return result;
    }

    private boolean delete() throws SQLException {
        boolean result = true;

        Leave leave = new Leave();
        leave.setId(Integer.parseInt(formRequestLeaveHeaderLabelIdLeave.getText()));
        result = leave.delete(leave.getId());

        return result;
    }

    public void clear() {
        formRequestLeaveMainTextAreaReasons.setText("");
        formRequestLeaveMainDateChooserFrom.setDate(null);
        formRequestLeaveMainDateChooserTo.setDate(null);
        setListAttachment(list_attachments = new ArrayList<>());
    }

    private boolean validation() {

        boolean result;

        result = !(formRequestLeaveMainDateChooserTo.getDate() == null
                || formRequestLeaveMainDateChooserFrom.getDate() == null
                || formRequestLeaveMainTextAreaReasons.getText().equals(""));

        return result;
    }

    public void assignValue(Leave leave) {
        try {
            SimpleDateFormat simpleDateFormatFrom = new SimpleDateFormat("yyyy-MM-dd");
            SimpleDateFormat simpleDateFormatTo = new SimpleDateFormat("yyyy-MM-dd");

            Date dateFrom = simpleDateFormatFrom.parse(leave.getDateFrom());
            Date dateTo = simpleDateFormatTo.parse(leave.getDateTo());

            formRequestLeaveMainComboBoxType.setSelectedItem(leave.getTypeName());
            formRequestLeaveMainDateChooserFrom.setDate(dateFrom);
            formRequestLeaveMainDateChooserTo.setDate(dateTo);
            formRequestLeaveMainTextAreaReasons.setText(leave.getReasons());
            formRequestLeaveHeaderLabelIsUpdate.setText("1");
            formRequestLeaveHeaderLabelIdLeave.setText(leave.getId().toString());
            
            if(!leave.getStatus().equals(Constanta.Leave.DRAF)){
                formRequestLeaveMainButtonSave.setEnabled(false);
                formRequestLeaveMainButtonSubmit.setEnabled(false);
                formRequestLeaveMainButtonDelete.setEnabled(false);
            } else {
                formRequestLeaveMainButtonSave.setEnabled(true);
                formRequestLeaveMainButtonSubmit.setEnabled(true);
                formRequestLeaveMainButtonDelete.setEnabled(true);
            }
            
            setLeave(leave);
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }

    private void displayImage(String path, String name) throws IOException {
        JPanel panel = new JPanel();

        BufferedImage image = ImageIO.read(new File(path));
        JLabel label = new JLabel(new ImageIcon(image));
        panel.add(label);

        JFrame.setDefaultLookAndFeelDecorated(true);
        JFrame frame = new JFrame(name);

        frame.add(panel);
        frame.pack();
        frame.setVisible(true);
    }
    
    private boolean generateReport() throws BadElementException, IOException, SQLException {
        boolean result = false;
        Document document = new Document();
        try {
            //font setting
            Font bfBold14 = new Font(Font.FontFamily.TIMES_ROMAN, 14, Font.BOLD, new BaseColor(Color.BLACK));
            Font bfNormal14 = new Font(Font.FontFamily.TIMES_ROMAN, 14);
            Font bfNormal12 = new Font(Font.FontFamily.TIMES_ROMAN, 12);

            //document header attributes
            document.addAuthor(Constanta.PdfDocument.DOCUMENT_AUTHOR);
            document.addCreationDate();
            document.addProducer();
            document.addCreator(Constanta.PdfDocument.DOCUMENT_CREATOR);
            document.addTitle(Constanta.PdfDocument.DOCUMENT_TITLE_ATTENDANCE);
            document.setPageSize(PageSize.A4);

            PdfWriter pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(
                    Constanta.PdfDocument.PATH + "RequestLeaveDetail" + localDateTimeNow.format(DATETIME_PDF_FORMATTER) + ".pdf"));
            document.open();

            PdfPTable pdfPTable = new PdfPTable(3);
            pdfPTable.setWidthPercentage(Constanta.PdfDocument.WIDTH_PERCENTAGE);
            pdfPTable.setSpacingBefore(Constanta.PdfDocument.SPACING_BEFORE);
            pdfPTable.setSpacingAfter(Constanta.PdfDocument.SPACING_AFTER);

            float[] columnWidth = {3f, 1f, 3f};
            pdfPTable.setWidths(columnWidth);
            
            String imagePath = Constanta.PdfDocument.PATH_LOGO;
            Image image = Image.getInstance(imagePath);
            image.setAlignment(Image.MIDDLE);
            
            pdfPTable.addCell(image);
            insertCell(pdfPTable, "", Element.ALIGN_CENTER, 3, bfNormal12);
            pdfPTable.setHeaderRows(1);

            insertCell(pdfPTable, "Report Request Leave Detail", Element.ALIGN_CENTER, 3, bfNormal12);
            insertCell(pdfPTable, "Employee Content Management System", Element.ALIGN_CENTER, 3, bfNormal12);
            insertCell(pdfPTable, "", Element.ALIGN_CENTER, 3, bfNormal12);
            
            insertCell(pdfPTable, "Full Name", Element.ALIGN_LEFT, 1, bfNormal14);
            insertCell(pdfPTable, ":", Element.ALIGN_CENTER, 1, bfNormal14);
            insertCell(pdfPTable, getLeave().getFullName(), Element.ALIGN_LEFT, 1, bfNormal14);

            insertCell(pdfPTable, "Request Date", Element.ALIGN_LEFT, 1, bfNormal14);
            insertCell(pdfPTable, ":", Element.ALIGN_CENTER, 1, bfNormal14);
            insertCell(pdfPTable, getLeave().getRequestDate(), Element.ALIGN_LEFT, 1, bfNormal14);

            insertCell(pdfPTable, "From", Element.ALIGN_LEFT, 1, bfNormal14);
            insertCell(pdfPTable, ":", Element.ALIGN_CENTER, 1, bfNormal14);
            insertCell(pdfPTable, getLeave().getDateFrom(), Element.ALIGN_LEFT, 1, bfNormal14);

            insertCell(pdfPTable, "To", Element.ALIGN_LEFT, 1, bfNormal14);
            insertCell(pdfPTable, ":", Element.ALIGN_CENTER, 1, bfNormal14);
            insertCell(pdfPTable, getLeave().getDateTo(), Element.ALIGN_LEFT, 1, bfNormal14);

            insertCell(pdfPTable, "Status", Element.ALIGN_LEFT, 1, bfNormal14);
            insertCell(pdfPTable, ":", Element.ALIGN_CENTER, 1, bfNormal14);
            insertCell(pdfPTable, getLeave().getStatus(), Element.ALIGN_LEFT, 1, bfNormal14);

            insertCell(pdfPTable, "Reasons", Element.ALIGN_LEFT, 1, bfNormal14);
            insertCell(pdfPTable, ":", Element.ALIGN_CENTER, 1, bfNormal14);
            insertCell(pdfPTable, getLeave().getReasons(), Element.ALIGN_LEFT, 1, bfNormal14);
            
            insertCell(pdfPTable, "Attachments", Element.ALIGN_LEFT, 3, bfNormal14);
            Attachment attachment = new Attachment();
            List<Attachment> attachments = attachment.getByHeader(getLeave().getId());
            for (int i = 0; i < attachments.size(); i++) {
                String attachmentImage = attachments.get(i).getFilePath();
                Image attacmentImage = Image.getInstance(attachmentImage);
                image.setAlignment(Image.MIDDLE);
                pdfPTable.addCell(attacmentImage);
                insertCell(pdfPTable, "", Element.ALIGN_CENTER, 3, bfNormal12);
                insertCell(pdfPTable, attachments.get(i).getFileName(), Element.ALIGN_CENTER, 3, bfNormal12);
            }

            document.add(pdfPTable);
            document.close();
            pdfWriter.close();

            result = true;
        } catch (DocumentException | FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
            result = false;
        }
        return result;
    }
    
    
    private void insertCell(PdfPTable table, String text, int align, int colspan, Font font) {
        PdfPCell cell;
        text = text == null ? "" : text.trim();
        cell = new PdfPCell(new Phrase(text, font));
        cell.setHorizontalAlignment(align);
        cell.setColspan(colspan);
        cell.setBorder(0);

        if (text.trim().equalsIgnoreCase("")) {
            cell.setMinimumHeight(10f);
        }
        table.addCell(cell);
    }

    private void formRequestLeaveMainButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formRequestLeaveMainButtonBackActionPerformed
        // TODO add your handling code here:
        try {
            Dashboard dashboard = new Dashboard();
            dashboard.show();
            dashboard.setLabelId(formRequestLeaveHeaderLabelId.getText());
            dashboard.setLabelNik(formRequestLeaveHeaderLabelNik.getText());
            dashboard.setFullName(getFullName());
            dashboard.setAccessMenu(getAccessMenu());
            dashboard.loadDataAttendance();
            dashboard.loadDataLeave();
            dashboard.loadDataPayslip();
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formRequestLeaveMainButtonBackActionPerformed

    private void formRequestLeaveMainButtonBackKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formRequestLeaveMainButtonBackKeyPressed
        // TODO add your handling code here:
        try {
            Dashboard dashboard = new Dashboard();
            dashboard.show();
            dashboard.setLabelId(formRequestLeaveHeaderLabelId.getText());
            dashboard.setLabelNik(formRequestLeaveHeaderLabelNik.getText());
            dashboard.setFullName(getFullName());
            dashboard.setAccessMenu(getAccessMenu());
            dashboard.loadDataAttendance();
            dashboard.loadDataLeave();
            dashboard.loadDataPayslip();
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formRequestLeaveMainButtonBackKeyPressed

    private void formRequestLeaveMainButtonLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formRequestLeaveMainButtonLogoutActionPerformed
        // TODO add your handling code here:
        try {
            int action = JOptionPane.showConfirmDialog(null,
                    Constanta.Messages.MESSAGE_CONFIRM_LOGOUT,
                    Constanta.Messages.BANNER_CONFIRM,
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);

            if (action == JOptionPane.YES_OPTION) {
                Login login = new Login();
                login.show();
                this.dispose();
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formRequestLeaveMainButtonLogoutActionPerformed

    private void formRequestLeaveMainButtonLogoutKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formRequestLeaveMainButtonLogoutKeyPressed
        // TODO add your handling code here:
        try {
            int action = JOptionPane.showConfirmDialog(null,
                    Constanta.Messages.MESSAGE_CONFIRM_LOGOUT,
                    Constanta.Messages.BANNER_CONFIRM,
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);

            if (action == JOptionPane.YES_OPTION) {
                Login login = new Login();
                login.show();
                this.dispose();
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formRequestLeaveMainButtonLogoutKeyPressed

    private void formRequestLeaveMainButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formRequestLeaveMainButtonSaveActionPerformed
        // TODO add your handling code here:
        try {
            if (validation()) {
                if (submit(Constanta.Leave.DRAF)) {
                    JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_SUCCESS);
                    clear();
                    Dashboard dashboard = new Dashboard();
                    dashboard.show();
                    dashboard.setLabelId(formRequestLeaveHeaderLabelId.getText());
                    dashboard.setLabelNik(formRequestLeaveHeaderLabelNik.getText());
                    dashboard.setFullName(getFullName());
                    dashboard.setAccessMenu(getAccessMenu());
                    dashboard.loadDataAttendance();
                    dashboard.loadDataLeave();
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_FAILED);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formRequestLeaveMainButtonSaveActionPerformed

    private void formRequestLeaveMainButtonSaveKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formRequestLeaveMainButtonSaveKeyPressed
        // TODO add your handling code here:
        try {
            if (validation()) {
                if (submit(Constanta.Leave.DRAF)) {
                    JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_SUCCESS);
                    clear();
                    Dashboard dashboard = new Dashboard();
                    dashboard.show();
                    dashboard.setLabelId(formRequestLeaveHeaderLabelId.getText());
                    dashboard.setLabelNik(formRequestLeaveHeaderLabelNik.getText());
                    dashboard.setFullName(getFullName());
                    dashboard.setAccessMenu(getAccessMenu());
                    dashboard.loadDataAttendance();
                    dashboard.loadDataLeave();
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_FAILED);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formRequestLeaveMainButtonSaveKeyPressed

    private void formRequestLeaveMainButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formRequestLeaveMainButtonSubmitActionPerformed
        // TODO add your handling code here:
        try {
            int action = JOptionPane.showConfirmDialog(null,
                    Constanta.Messages.MESSAGE_CONFIRM_SUBMIT,
                    Constanta.Messages.BANNER_CONFIRM,
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            if (action == JOptionPane.YES_OPTION) {
                if (validation()) {
                    if (submit(Constanta.Leave.SUBMIT)) {
                        JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_SUCCESS);
                        clear();
                        Dashboard dashboard = new Dashboard();
                        dashboard.show();
                        dashboard.setLabelId(formRequestLeaveHeaderLabelId.getText());
                        dashboard.setLabelNik(formRequestLeaveHeaderLabelNik.getText());
                        dashboard.setFullName(getFullName());
                        dashboard.setAccessMenu(getAccessMenu());
                        dashboard.loadDataAttendance();
                        dashboard.loadDataLeave();
                        this.dispose();
                    } else {
                        JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_FAILED);
                    }
                }
            }
            clear();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formRequestLeaveMainButtonSubmitActionPerformed

    private void formRequestLeaveMainButtonSubmitKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formRequestLeaveMainButtonSubmitKeyPressed
        // TODO add your handling code here:
        try {
            int action = JOptionPane.showConfirmDialog(null,
                    Constanta.Messages.MESSAGE_CONFIRM_SUBMIT,
                    Constanta.Messages.BANNER_CONFIRM,
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE);
            if (action == JOptionPane.YES_OPTION) {
                if (validation()) {
                    if (submit(Constanta.Leave.SUBMIT)) {
                        JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_SUCCESS);
                        clear();
                        Dashboard dashboard = new Dashboard();
                        dashboard.show();
                        dashboard.setLabelId(formRequestLeaveHeaderLabelId.getText());
                        dashboard.setLabelNik(formRequestLeaveHeaderLabelNik.getText());
                        dashboard.setFullName(getFullName());
                        dashboard.setAccessMenu(getAccessMenu());
                        dashboard.loadDataAttendance();
                        dashboard.loadDataLeave();
                        this.dispose();
                    } else {
                        JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_FAILED);
                    }
                }
            }
            clear();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formRequestLeaveMainButtonSubmitKeyPressed

    private void formRequestLeaveMainButtonChooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formRequestLeaveMainButtonChooseFileActionPerformed
        // TODO add your handling code here:
        try {
            uploadFiles();
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formRequestLeaveMainButtonChooseFileActionPerformed

    private void formRequestLeaveMainButtonChooseFileKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formRequestLeaveMainButtonChooseFileKeyPressed
        // TODO add your handling code here:
        try {
            uploadFiles();
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formRequestLeaveMainButtonChooseFileKeyPressed

    private void formRequestLeaveMainButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formRequestLeaveMainButtonDeleteActionPerformed
        // TODO add your handling code here:
        try {
            if (delete()) {
                JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_SUCCESS);
                clear();
                Dashboard dashboard = new Dashboard();
                dashboard.show();
                dashboard.setLabelId(formRequestLeaveHeaderLabelId.getText());
                dashboard.setLabelNik(formRequestLeaveHeaderLabelNik.getText());
                dashboard.setFullName(getFullName());
                dashboard.setAccessMenu(getAccessMenu());
                dashboard.loadDataAttendance();
                dashboard.loadDataLeave();
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_FAILED);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formRequestLeaveMainButtonDeleteActionPerformed

    private void formRequestLeaveMainButtonDeleteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formRequestLeaveMainButtonDeleteKeyPressed
        // TODO add your handling code here:
        try {
            if (delete()) {
                JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_SUCCESS);
                clear();
                Dashboard dashboard = new Dashboard();
                dashboard.show();
                dashboard.setLabelId(formRequestLeaveHeaderLabelId.getText());
                dashboard.setLabelNik(formRequestLeaveHeaderLabelNik.getText());
                dashboard.setFullName(getFullName());
                dashboard.setAccessMenu(getAccessMenu());
                dashboard.loadDataAttendance();
                dashboard.loadDataLeave();
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_FAILED);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formRequestLeaveMainButtonDeleteKeyPressed

    private void formRequestLeaveMainTableAttachmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formRequestLeaveMainTableAttachmentMouseClicked
        // TODO add your handling code here:
        try {
            int rowSelected = formRequestLeaveMainTableAttachment.getSelectedRow();
            String selectedFileName = formRequestLeaveMainTableAttachment.getValueAt(rowSelected, 2).toString();
            String selectedFilePath = formRequestLeaveMainTableAttachment.getValueAt(rowSelected, 3).toString();
            displayImage(selectedFilePath, selectedFileName);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formRequestLeaveMainTableAttachmentMouseClicked

    private void formRequestLeaveMainButtonPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formRequestLeaveMainButtonPrintActionPerformed
        // TODO add your handling code here:
        try {
            boolean is_print = generateReport();
            if (is_print) {
                JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_SUCCESS);
            } else {
                JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_FAILED);
            }
        } catch (HeadlessException | BadElementException | IOException | SQLException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formRequestLeaveMainButtonPrintActionPerformed

    private void formRequestLeaveMainButtonPrintKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formRequestLeaveMainButtonPrintKeyPressed
        // TODO add your handling code here:
        try {
            boolean is_print = generateReport();
            if (is_print) {
                JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_SUCCESS);
            } else {
                JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_FAILED);
            }
        } catch (HeadlessException | BadElementException | IOException | SQLException e) {
            JOptionPane.showMessageDialog(null, Constanta.Messages.MESSAGE_ERROR + e.getMessage());
        }
    }//GEN-LAST:event_formRequestLeaveMainButtonPrintKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LeaveRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LeaveRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LeaveRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LeaveRequest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LeaveRequest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JLabel formRequestLeaveHeaderLabelId;
    public javax.swing.JLabel formRequestLeaveHeaderLabelIdLeave;
    public javax.swing.JLabel formRequestLeaveHeaderLabelIsUpdate;
    public javax.swing.JLabel formRequestLeaveHeaderLabelNik;
    private javax.swing.JLabel formRequestLeaveHeaderLable;
    private javax.swing.JButton formRequestLeaveMainButtonBack;
    private javax.swing.JButton formRequestLeaveMainButtonChooseFile;
    private javax.swing.JButton formRequestLeaveMainButtonDelete;
    private javax.swing.JButton formRequestLeaveMainButtonLogout;
    private javax.swing.JButton formRequestLeaveMainButtonPrint;
    private javax.swing.JButton formRequestLeaveMainButtonSave;
    private javax.swing.JButton formRequestLeaveMainButtonSubmit;
    private javax.swing.JComboBox<String> formRequestLeaveMainComboBoxType;
    private com.toedter.calendar.JDateChooser formRequestLeaveMainDateChooserFrom;
    private com.toedter.calendar.JDateChooser formRequestLeaveMainDateChooserTo;
    private javax.swing.JLabel formRequestLeaveMainLabelFile;
    private javax.swing.JLabel formRequestLeaveMainLabelFrom;
    private javax.swing.JLabel formRequestLeaveMainLabelFullName;
    private javax.swing.JLabel formRequestLeaveMainLabelReasons;
    private javax.swing.JLabel formRequestLeaveMainLabelTo;
    private javax.swing.JLabel formRequestLeaveMainLabelType;
    private javax.swing.JPanel formRequestLeaveMainPanelButton;
    private javax.swing.JPanel formRequestLeaveMainPanelFiles;
    private javax.swing.JPanel formRequestLeaveMainPanelForm;
    private javax.swing.JTable formRequestLeaveMainTableAttachment;
    private javax.swing.JTextArea formRequestLeaveMainTextAreaReasons;
    private javax.swing.JPanel formRequestLeavePanelFooter;
    private javax.swing.JPanel formRequestLeavePanelHeader;
    private javax.swing.JPanel formRequestLeavePanelMain;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private keeptoo.KGradientPanel kGradientPanel2;
    private keeptoo.KGradientPanel kGradientPanel3;
    // End of variables declaration//GEN-END:variables
}
